diff -w -B -a -d -u -b -r --new-file 18_multi_level/src/Entities.hs 19_story/src/Entities.hs
--- 18_multi_level/src/Entities.hs	2018-03-05 12:11:01.245072766 +0200
+++ 19_story/src/Entities.hs	2018-03-05 12:11:01.265072395 +0200
@@ -24,6 +24,9 @@
            , (E.Snake     , (38,  4), Nothing)
            , (E.Dark      , (43, 11), Nothing)
            , (E.Stairs    , (56, 44), Just "s")
+           , (E.PotionDark , (16, 46), Just "pd")
+           , (E.PotionLight, ( 8, 46), Just "pl")
+           , (E.Key        , (54, 45), Just "ke")
            ]
   in
   let mkData (typ, pos@(x, y), l) (tiles', entities', loads') =
diff -w -B -a -d -u -b -r --new-file 18_multi_level/src/EntityType.hs 19_story/src/EntityType.hs
--- 18_multi_level/src/EntityType.hs	2018-03-05 12:11:01.249072692 +0200
+++ 19_story/src/EntityType.hs	2018-03-05 12:11:01.269072320 +0200
@@ -13,5 +13,8 @@
                 | Snake
                 | Dark
                 | Stairs
+                | PotionDark
+                | PotionLight
+                | Key
                 | Unknown
                 deriving (Show, Eq, Ord)
diff -w -B -a -d -u -b -r --new-file 18_multi_level/src/GameCore.hs 19_story/src/GameCore.hs
--- 18_multi_level/src/GameCore.hs	2018-03-05 12:11:01.245072766 +0200
+++ 19_story/src/GameCore.hs	2018-03-05 12:11:01.265072395 +0200
@@ -97,7 +97,7 @@
 data Level = Level { _lvlName :: !Text
                    , _lvlBoot :: !(World -> World)
                    , _lvlMapText :: !Text
-                   , _lvlTryMove :: !([Actor] -> Maybe E.EntityType -> World -> WorldPos -> Actor -> [RogueAction])
+                   , _lvlStoryHandler :: !StoryHandler
                    }
 
 data Levels = Levels01
@@ -105,12 +105,20 @@
 
 newtype WorldPos = WorldPos (Int, Int) deriving (Show, Eq, Ord)
 newtype PlayerPos = PlayerPos (Int, Int) deriving (Show, Eq, Ord)
+type StoryHandler = World -> RogueEvent -> [RogueAction]
 
 data RogueAction = ActMovePlayer (Int, Int)
                  | ActMoveActor Actor WorldPos
                  | ActSetPlayerViewPortStyle ViewPortStyle
                  | ActTogglePlayerProp Text Text
+                 | ActClearPlayerProp Text
+                 | ActSetPlayerProp Text Text
                  | ActGotoLevel Levels
+                 | ActSetStoryHandler StoryHandler
+                 | ActRemoveEntity E.EntityType WorldPos
+                 | ActReplaceEntity E.EntityType WorldPos Entity
+
+data RogueEvent = EvtMove [Actor] (Maybe E.EntityType) WorldPos Actor
 
 data ViewPortStyle = ViewPortCentre
                    | ViewPortLock PlayerPos
diff -w -B -a -d -u -b -r --new-file 18_multi_level/src/GameEngine.hs 19_story/src/GameEngine.hs
--- 18_multi_level/src/GameEngine.hs	2018-03-05 12:11:01.249072692 +0200
+++ 19_story/src/GameEngine.hs	2018-03-05 12:11:01.269072320 +0200
@@ -431,6 +431,12 @@
     ActTogglePlayerProp prop valEnabled ->
       world & (wdPlayer . plActor . acProps) %~ Map.alter (toggleMapProp valEnabled) prop
 
+    ActSetPlayerProp prop valEnabled ->
+      world & (wdPlayer . plActor . acProps) %~ Map.insert prop valEnabled
+
+    ActClearPlayerProp prop ->
+      world & (wdPlayer . plActor . acProps) %~ Map.delete prop
+
     ActMoveActor actor worldPos ->
       let
         movedActor = actor & acWorldPos .~ worldPos
@@ -447,10 +453,27 @@
         (world ^. wdGetLevel)
         l
 
+    ActSetStoryHandler h ->
+      world & (wdLevel . lvlStoryHandler) .~ h
+
+    ActRemoveEntity existingType atWorldPos ->
+      world & wdMap %~ Map.alter (deleteMapEntity existingType) atWorldPos
+
+    ActReplaceEntity existingType atWorldPos newEntity ->
+      world & wdMap %~ Map.alter (alterMapEntity existingType newEntity) atWorldPos
+
   where
     toggleMapProp v Nothing = Just v
     toggleMapProp _ (Just _) = Nothing
 
+    alterMapEntity :: E.EntityType -> Entity -> Maybe Entity -> Maybe Entity
+    alterMapEntity _ new Nothing = Just new
+    alterMapEntity oldType new (Just oldEntity) = if oldType == (oldEntity ^. enType) then Just new else Just oldEntity
+
+    deleteMapEntity :: E.EntityType -> Maybe Entity -> Maybe Entity
+    deleteMapEntity _ Nothing = Nothing
+    deleteMapEntity oldType (Just oldEntity) = if oldType == (oldEntity ^. enType) then Nothing else Just oldEntity
+
 
 tryMoveActor :: World -> Actor -> (Int, Int) -> Maybe World
 tryMoveActor world actor (dx, dy) =
@@ -474,8 +497,10 @@
       destEntityType = _enType <$> destEntity
       -- Actors at destination
       destActors = filter (\a -> a ^. acWorldPos == tryWorldTo') (getAllActors world)
-      -- Get actions
-      actions = (world ^. wdLevel ^. lvlTryMove) destActors destEntityType world tryWorldTo' actor
+      -- Create move event
+      evt = EvtMove destActors destEntityType tryWorldTo' actor
+      -- Run even to get actions
+      actions = (world ^. wdLevel ^. lvlStoryHandler) world evt 
    in
    Just $ runActions world actions 
 
diff -w -B -a -d -u -b -r --new-file 18_multi_level/src/Levels/Level01.hs 19_story/src/Levels/Level01.hs
--- 18_multi_level/src/Levels/Level01.hs	2018-03-05 12:11:01.245072766 +0200
+++ 19_story/src/Levels/Level01.hs	2018-03-05 12:11:01.265072395 +0200
@@ -1,7 +1,8 @@
 {-# LANGUAGE NoImplicitPrelude #-}
 {-# LANGUAGE OverloadedStrings #-}
+{-# LANGUAGE LambdaCase #-}
 
-module Levels.Level01 where
+module Levels.Level01 (mkLevel) where
 
 import Protolude hiding (Map)
 import qualified Data.Set as Set
@@ -16,6 +17,14 @@
 import qualified BoundedInt as B
 import qualified UtilityBrain as UB
 
+mkLevel :: Text -> Level
+mkLevel mapText =
+  Level { _lvlName = "L01"
+        , _lvlBoot = bootLevel 
+        , _lvlMapText = mapText
+        , _lvlStoryHandler = storyWaitingForKey
+        }
+
 bootLevel :: World -> World
 bootLevel w1 =
   let
@@ -58,12 +67,72 @@
             , _acProps = Map.empty
             }
 
-tryMove :: [Actor] -> Maybe E.EntityType -> World -> WorldPos -> Actor -> [RogueAction]
-tryMove destActors destEntityType _ posTo movingActor =
-  -- Is the move allowed
+
+storyCommon :: World -> RogueEvent -> (RogueEvent -> [RogueAction]) -> [RogueAction]
+storyCommon world evt handler =
+  case evt of
+    EvtMove destActors destEntityType posTo movingActor ->
+      let isPlayer = isPlayerMoving world movingActor in
+      case (isPlayer, destActors, destEntityType) of
+        (_, [], Just E.Blank) -> [ActMoveActor movingActor posTo]
+        (_, [], Just E.Door) -> [ActMoveActor movingActor posTo]
+        (_, [], Nothing) -> [ActMoveActor movingActor posTo]
+
+        -- Only the player can pickup potions. Set lights on
+        (True, [], Just E.PotionLight) -> [ ActMoveActor movingActor posTo
+                                          , ActSetPlayerProp "debug:light" "on"
+                                          , ActRemoveEntity E.PotionLight posTo
+                                          ]
+
+        -- Only the player can pickup potions. Set lights off
+        (True, [], Just E.PotionDark) -> [ ActMoveActor movingActor posTo
+                                         , ActClearPlayerProp "debug:light"
+                                         , ActRemoveEntity E.PotionDark posTo
+                                         ]
+        -- Fall through 
+        _ -> handler evt
+
+
+storyWaitingForKey :: World -> RogueEvent -> [RogueAction]
+storyWaitingForKey world evt =
+  storyCommon world evt $
+    \case
+      EvtMove destActors destEntityType posTo movingActor ->
+        let isPlayer = isPlayerMoving world movingActor in
+
+        case (isPlayer, destActors, destEntityType) of
+          -- Player picked up the key
+          (True, [], Just E.Key) ->
+            [ ActMoveActor movingActor posTo
+            , ActSetStoryHandler storyDoorOpen
+            , ActRemoveEntity E.Key posTo
+            ] <>
+            -- Replace all closed doors with open ones
+            ((\closedDoorAt -> ActReplaceEntity E.DoorClosed closedDoorAt $ E.getEntity E.Door) <$> findPos E.DoorClosed)
+                   
+          _ -> []
+
+  where
+    findPos :: E.EntityType -> [WorldPos]
+    findPos et =
+      let
+        es = Map.toList $ world ^. wdMap
+        found = filter (\(_, e) -> e ^. enType == et) es
+      in
+      fst <$> found
+
+  
+storyDoorOpen :: World -> RogueEvent -> [RogueAction]
+storyDoorOpen world evt =
+  storyCommon world evt $
+    \case
+      EvtMove destActors destEntityType posTo movingActor ->
   case (destActors, destEntityType) of
-    ([], Just E.Blank) -> [ActMoveActor movingActor posTo]
-    ([], Just E.Door) -> [ActMoveActor movingActor posTo]
-    ([], Nothing) -> [ActMoveActor movingActor posTo]
+          ([], Just E.Key) -> [ActMoveActor movingActor posTo]
     (_, Just E.Stairs) -> [ActGotoLevel Levels02]
     _ -> []
+
+
+isPlayerMoving :: World -> Actor -> Bool
+isPlayerMoving w a =
+  w ^. wdPlayer ^. plActor ^. acId == a ^. acId
diff -w -B -a -d -u -b -r --new-file 18_multi_level/src/Levels/Level02.hs 19_story/src/Levels/Level02.hs
--- 18_multi_level/src/Levels/Level02.hs	2018-03-05 12:11:01.245072766 +0200
+++ 19_story/src/Levels/Level02.hs	2018-03-05 12:11:01.265072395 +0200
@@ -1,19 +1,31 @@
 {-# LANGUAGE NoImplicitPrelude #-}
+{-# LANGUAGE OverloadedStrings #-}
 
-module Levels.Level02 where
+module Levels.Level02 (mkLevel)  where
 
 import           Protolude
 
 import           GameCore
 import qualified EntityType as E
 
+  
+mkLevel :: Text -> Level
+mkLevel mapText =
+  Level { _lvlName = "L02"
+        , _lvlBoot = bootLevel 
+        , _lvlMapText = mapText
+        , _lvlStoryHandler = storySimple
+        }
+
+
 bootLevel :: World -> World
 bootLevel w = w
 
 
-tryMove :: [Actor] -> Maybe E.EntityType -> World -> WorldPos -> Actor -> [RogueAction]
-tryMove destActors destEntityType _ posTo movingActor =
-  -- Is the move allowed
+storySimple :: World -> RogueEvent -> [RogueAction]
+storySimple _ evt =
+  case evt of
+    EvtMove destActors destEntityType posTo movingActor ->
   case (destActors, destEntityType) of
     ([], Just E.Blank) -> [ActMoveActor movingActor posTo]
     ([], Just E.Door) -> [ActMoveActor movingActor posTo]
diff -w -B -a -d -u -b -r --new-file 18_multi_level/app/Main.hs 19_story/app/Main.hs
--- 18_multi_level/app/Main.hs	2018-03-05 12:11:01.245072766 +0200
+++ 19_story/app/Main.hs	2018-03-05 12:11:01.265072395 +0200
@@ -18,15 +18,7 @@
   GE.runGame (getLevel map01 map02)
 
 getLevel :: Text -> Text -> GC.Levels -> GC.Level
-getLevel map01 _ GC.Levels01 = GC.Level { GC._lvlName = "L01"
-                                        , GC._lvlBoot = L01.bootLevel 
-                                        , GC._lvlMapText = map01
-                                        , GC._lvlTryMove = L01.tryMove
-                                        }
-getLevel _ map02 GC.Levels02 = GC.Level { GC._lvlName = "L02"
-                                        , GC._lvlBoot = L02.bootLevel 
-                                        , GC._lvlMapText = map02
-                                        , GC._lvlTryMove = L02.tryMove
-                                        }
+getLevel map01 _ GC.Levels01 = L01.mkLevel map01
+getLevel _ map02 GC.Levels02 = L02.mkLevel map02
 
 
