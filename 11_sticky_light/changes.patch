Common subdirectories: 10_fov/src/Data and 11_sticky_light/src/Data
diff -w -B -a -d -u -b --new-file 10_fov/src/GameCore.hs 11_sticky_light/src/GameCore.hs
--- 10_fov/src/GameCore.hs	2018-03-05 12:11:01.249072692 +0200
+++ 11_sticky_light/src/GameCore.hs	2018-03-05 12:11:01.249072692 +0200
@@ -29,6 +29,7 @@
                    , _acWorldPos :: !WorldPos
                    , _acStdGen :: !Rnd.StdGen
                    , _acFov :: !(Maybe [(WorldPos, [WorldPos])])
+                   , _acFovHistory :: !(Set WorldPos)
                    , _acFovDistance :: !Int
                    }
 
diff -w -B -a -d -u -b --new-file 10_fov/src/GameEngine.hs 11_sticky_light/src/GameEngine.hs
--- 10_fov/src/GameEngine.hs	2018-03-05 12:11:01.253072618 +0200
+++ 11_sticky_light/src/GameEngine.hs	2018-03-05 12:11:01.249072692 +0200
@@ -5,6 +5,7 @@
 module GameEngine where
 
 import Protolude hiding (Map)
+import qualified Data.Set as Set
 import           Data.Map.Strict (Map)
 import qualified Data.Map.Strict as Map
 import qualified Data.List as Lst
@@ -140,6 +140,7 @@
             , _acStdGen = std
             , _acFovDistance = 3
             , _acFov = Nothing
+            , _acFovHistory = Set.empty
             }
 
     mkEnemyActor aid e (x, y) =
@@ -150,6 +151,7 @@
             , _acStdGen = std
             , _acFovDistance = 2
             , _acFov = Nothing
+            , _acFovHistory = Set.empty
             }
     
 
@@ -417,7 +419,10 @@
 
 updateActorFov :: World -> Actor -> Actor
 updateActorFov w a =
-  a & acFov .~ Just (calcFov (a ^. acFovDistance) (isTransparent $ w ^. wdMap) (a ^. acWorldPos))
+ -- Calculate field of view
+ let fov = calcFov (a ^. acFovDistance) (isTransparent $ w ^. wdMap) (a ^. acWorldPos) in
+ a & acFov .~ Just fov
+   & acFovHistory %~ Set.union (Set.fromList $ flatFov (Just fov))
 
 
 -- | Update either the player's actor, or one of the world actors
@@ -574,9 +579,11 @@
                            ] 
 
     lightAt = worldCoordToPlayer (player ^. plWorldTopLeft) <$> flatFov (actor ^. acFov)
+    seen = worldCoordToPlayer (player ^. plWorldTopLeft) <$> Set.toList (actor ^. acFovHistory)
   in
   -- Remove the darkness overlay at any position that is to be lit
-  foldr Map.delete blackBg lightAt
+  --  I.e. any position in the field of view, or previously in the field of view
+  foldr Map.delete blackBg $ lightAt <> seen
 
   
 flatFov :: Maybe [(WorldPos, [WorldPos])] -> [WorldPos]
