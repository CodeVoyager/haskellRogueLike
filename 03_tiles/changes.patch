Common subdirectories: ../01_web_ui/src/Data and ./src/Data
diff -w -B -a -d -u -b --new-file ../01_web_ui/src/Entities.hs ./src/Entities.hs
--- ../01_web_ui/src/Entities.hs	1970-01-01 02:00:00.000000000 +0200
+++ ./src/Entities.hs	2018-02-17 17:20:06.255088107 +0200
@@ -0,0 +1,56 @@
+{-# LANGUAGE NoImplicitPrelude #-}
+{-# LANGUAGE OverloadedStrings #-}
+
+module Entities where
+
+import Protolude hiding (Map)
+import           Data.Map.Strict (Map)
+import qualified Data.Map.Strict as Map
+
+import           GameCore
+import qualified EntityType as E
+
+tiles :: Map E.EntityType Tile
+entities :: Map E.EntityType Entity
+loadTexts :: Map Text Entity
+
+(tiles, entities, loadTexts) =
+  let is = [ (E.Blank     , (41, 13), Nothing)
+           , (E.Door      , (26, 15), Just "+")
+           , (E.DoorClosed, (21, 15), Just "-")
+           , (E.Wall      , ( 9, 14), Just "w")
+           ]
+  in
+  let mkData (typ, pos@(x, y), l) (tiles', entities', loads') =
+        let (entity, tile) = mkEntityAndTile (x * 100 + y) typ pos in
+        ( Map.insert typ tile tiles'
+        , Map.insert typ entity entities'
+        , maybe loads' (\load -> Map.insert load entity loads') l
+        )
+  in
+  foldr
+    mkData
+    ( Map.fromList [(E.Unknown, tileUnknown)]
+    , Map.fromList [(E.Unknown, entityUnknown)]
+    , Map.empty
+    )
+    is
+
+
+getEntity :: E.EntityType -> Entity
+getEntity e = Map.findWithDefault entityUnknown e entities
+
+getTile :: E.EntityType -> Tile
+getTile e = Map.findWithDefault tileUnknown e tiles
+
+
+mkEntityAndTile :: Int -> E.EntityType -> (Int, Int) -> (Entity, Tile)
+mkEntityAndTile id typ pic =
+  let t = Tile { _tlId = id, _tlName = show typ, _tlPic = pic } in
+  let a = Entity { _enType = typ, _enTile = t, _enProps = Map.empty, _enAttribs = Map.empty} in
+  (a, t)
+    
+
+tileUnknown :: Tile
+entityUnknown :: Entity
+(entityUnknown, tileUnknown) = mkEntityAndTile 201 E.Unknown (2, 1)
diff -w -B -a -d -u -b --new-file ../01_web_ui/src/EntityType.hs ./src/EntityType.hs
--- ../01_web_ui/src/EntityType.hs	1970-01-01 02:00:00.000000000 +0200
+++ ./src/EntityType.hs	2018-02-17 16:57:58.969147930 +0200
@@ -0,0 +1,12 @@
+{-# LANGUAGE NoImplicitPrelude #-}
+
+module EntityType where
+
+import Protolude
+
+data EntityType = Blank
+                | Door
+                | DoorClosed
+                | Wall
+                | Unknown
+                deriving (Show, Eq, Ord)
diff -w -B -a -d -u -b --new-file ../01_web_ui/src/GameCore.hs ./src/GameCore.hs
--- ../01_web_ui/src/GameCore.hs	2018-02-18 15:37:50.223522344 +0200
+++ ./src/GameCore.hs	2018-02-18 15:37:39.082266617 +0200
@@ -14,7 +14,7 @@
 import           Control.Lens.TH (makeLenses)
 
 import qualified GameHost as Host
-
+import qualified EntityType as E
 
 data Player = Player { _plConn :: !Host.Connection
                      , _plScreenSize :: !(Int, Int)
@@ -27,31 +27,52 @@
 newtype Config = Config { _cfgKeys :: Map Text Text
                         }
 
+data Tile = Tile { _tlName :: !Text
+                 , _tlPic :: !(Int, Int)
+                 , _tlId :: !Int
+                 } deriving (Show, Eq, Ord)
+
+data Entity = Entity { _enType :: !E.EntityType
+                     , _enTile :: !Tile
+                     , _enProps :: !(Map Text Text)
+                     , _enAttribs :: !(Map Text Int)
+                     } deriving (Show, Eq, Ord)
+
+
 makeLenses ''World
 makeLenses ''Config
 makeLenses ''Player
+makeLenses ''Entity
+makeLenses ''Tile
 
 
-data UiMessage = UiMessage { umCmd :: Text
-                           , umMessage :: Text
+data UiMessage = UiMessage { umCmd :: !Text
+                           , umMessage :: !Text
                            }
                            deriving (Generic)
   
-data UiConfig = UiConfig { ucCmd :: Text
-                         , ucData :: UiConfigData
+data UiConfig = UiConfig { ucCmd :: !Text
+                         , ucData :: !UiConfigData
                          }
                          deriving (Generic)
 
-newtype UiConfigData = UiConfigData { udKeys :: [UiKey]
+data UiConfigData = UiConfigData { udKeys :: ![UiKey]
+                                 , udBlankId :: !Int
                                     }
                                     deriving (Generic)
 
-data UiKey = UiKey { ukShortcut :: Text
-                   , ukAction :: Text
+data UiKey = UiKey { ukShortcut :: !Text
+                   , ukAction :: !Text
                    }
                    deriving (Generic)
 
 
+data UiDrawCommand = UiDrawCommand
+                     { drCmd :: !Text
+                     , drScreenWidth :: !Int
+                     } deriving (Generic)
+
+
 instance Ae.ToJSON UiMessage where
   toJSON = Ae.genericToJSON Ae.defaultOptions { Ae.fieldLabelModifier = renField 2 True }
 
@@ -64,6 +85,9 @@
 instance Ae.ToJSON UiKey where
   toJSON = Ae.genericToJSON Ae.defaultOptions { Ae.fieldLabelModifier = renField 2 True }
 
+instance Ae.ToJSON UiDrawCommand where
+  toJSON = Ae.genericToJSON Ae.defaultOptions { Ae.fieldLabelModifier = renField 2 True }
+
 
 -- | drop prefix, and then lower case
 -- | renField 3 "tskBla" == "bla"
diff -w -B -a -d -u -b --new-file ../01_web_ui/src/GameEngine.hs ./src/GameEngine.hs
--- ../01_web_ui/src/GameEngine.hs	2018-02-18 10:10:42.961437918 +0200
+++ ./src/GameEngine.hs	2018-02-18 10:10:17.309202811 +0200
@@ -11,12 +11,15 @@
 import qualified Data.Aeson.Text.Extended as Ae
 import qualified Data.ByteString.Lazy as BSL
 import qualified Codec.Compression.BZip as Bz
-import           Control.Lens ((^.), (.~), (%~))
-import           Control.Concurrent.STM (atomically, newTVar, modifyTVar', TVar)
+import           Control.Lens (_1, (^.), (.~), (%~))
+import           Control.Concurrent.STM (atomically, readTVar, newTVar, modifyTVar', TVar)
 
 import           GameCore
 import qualified GameHost as Host
 import           GameHost (conSendData, conReceiveText)
+import qualified Entities as E
+import qualified EntityType as E
+
 
 runGame :: IO ()
 runGame = Host.runHost manageConnection
@@ -86,7 +89,9 @@
         Nothing -> sendError conn "missing / invalid screen size"
         Just (sx, sy) -> do
           updatePlayer (plScreenSize .~ (sx, sy))
-          sendLog conn $ "TODO: " <> cmd
+          w <- atomically $ readTVar worldV
+          drawAndSend w
+          sendLog conn "draw"
       
     "key" ->
       sendLog conn $ "TODO: " <> cmd <> ": " <> show cmdData
@@ -115,7 +120,9 @@
 
 buildConfig :: Config -> UiConfigData
 buildConfig cfg =
-  UiConfigData $ buildKeys (cfg ^. cfgKeys)
+  UiConfigData { udKeys = buildKeys (cfg ^. cfgKeys)
+               , udBlankId = E.getTile E.Blank ^. tlId
+               }
 
   where
     buildKeys ks = buildKey <$> Map.toList ks
@@ -139,4 +146,9 @@
   pure (x, y)
 
 
-  
+drawAndSend :: World -> IO ()
+drawAndSend world = do
+  let cmd = Ae.encodeText UiDrawCommand { drCmd = "draw"
+                                        , drScreenWidth = world ^. wdPlayer ^. plScreenSize ^. _1
+                                        }
+  sendData (world ^. wdPlayer ^. plConn) cmd
diff -w -B -a -d -u -b --new-file ../01_web_ui/src/GameHost.hs ./src/GameHost.hs
--- ../01_web_ui/src/GameHost.hs	2018-02-17 12:13:04.029016625 +0200
+++ ./src/GameHost.hs	2018-02-17 16:34:50.161448326 +0200
@@ -42,6 +42,9 @@
     Sc.get "/ping" $
       Sc.text "pong"
 
+    Sc.get "/tiles.png" $
+      Sc.file "html/DungeonCrawl_ProjectUtumnoTileset_0.png"
+
     Sc.get "/:res" $ do
       res <- Sc.param "res"
       Sc.file $ "html/" <> res
