Common subdirectories: ../05_actors/src/Data and ./src/Data
diff -w -B -a -d -u -b --new-file ../05_actors/src/GameCore.hs ./src/GameCore.hs
--- ../05_actors/src/GameCore.hs	2018-03-04 08:26:16.711672767 +0200
+++ ./src/GameCore.hs	2018-03-04 08:26:06.087835873 +0200
@@ -60,6 +60,8 @@
 newtype WorldPos = WorldPos (Int, Int) deriving (Show, Eq, Ord)
 newtype PlayerPos = PlayerPos (Int, Int) deriving (Show, Eq, Ord)
 
+newtype RogueAction = ActMovePlayer (Int, Int)
+
 
 data UiMessage = UiMessage { umCmd :: !Text
                            , umMessage :: !Text
diff -w -B -a -d -u -b --new-file ../05_actors/src/GameEngine.hs ./src/GameEngine.hs
--- ../05_actors/src/GameEngine.hs	2018-02-18 17:54:50.574217847 +0200
+++ ./src/GameEngine.hs	2018-02-19 07:53:04.157136562 +0200
@@ -93,7 +93,24 @@
         }
   where
     mkConfig =
-      Config { _cfgKeys = Map.fromList [("t", "test")] }
+      Config { _cfgKeys = Map.fromList [ ("up"      , "Move:up")
+                                       , ("k"       , "Move:up")
+                                       , ("down"    , "Move:down")
+                                       , ("j"       , "Move:down")
+                                       , ("left"    , "Move:left")
+                                       , ("h"       , "Move:left")
+                                       , ("right"   , "Move:right")
+                                       , ("l"       , "Move:right")
+                                       , ("u"       , "Move:up-right")
+                                       , ("pageup"  , "Move:up-right")
+                                       , ("y"       , "Move:up-left")
+                                       , ("home"    , "Move:up-left")
+                                       , ("n"       , "Move:down-right")
+                                       , ("end"     , "Move:down-left")
+                                       , ("b"       , "Move:down-left")
+                                       , ("pagedown", "Move:down-right")
+                                       ]
+             }
 
     mkPlayer =
       Player { _plConn = conn
@@ -131,8 +148,13 @@
           drawAndSend w
           sendLog conn "draw"
       
-    "key" ->
-      sendLog conn $ "TODO: " <> cmd <> ": " <> show cmdData
+    "key" -> do
+      -- Handle the key press
+      atomically $ modifyTVar' worldV (\w -> runActions w $ handleKey cmdData)
+      -- Get the updated world
+      w2 <- atomically $ readTVar worldV
+      -- Draw
+      drawAndSend w2
 
     _ ->
       sendError conn $ "Unknown command: " <> cmd
@@ -278,3 +300,30 @@
 getAllActors :: World -> [Actor]
 getAllActors world =
   world ^. wdPlayer ^. plActor : Map.elems (world ^. wdActors)
+
+
+handleKey :: [Text] -> [RogueAction]
+handleKey (cmd:_) = 
+  case cmd of
+    "Move:up"         -> [ActMovePlayer ( 0,  1)]
+    "Move:down"       -> [ActMovePlayer ( 0, -1)]
+    "Move:left"       -> [ActMovePlayer (-1,  0)]
+    "Move:right"      -> [ActMovePlayer ( 1,  0)]
+    "Move:up-right"   -> [ActMovePlayer ( 1,  1)]
+    "Move:up-left"    -> [ActMovePlayer (-1,  1)]
+    "Move:down-right" -> [ActMovePlayer ( 1, -1)]
+    "Move:down-left"  -> [ActMovePlayer (-1, -1)]
+    _                 -> []
+handleKey _ = []
+
+
+runActions :: World -> [RogueAction] -> World
+runActions world actions =
+  foldl' runAction world actions
+
+
+runAction :: World -> RogueAction -> World
+runAction world action =
+  case action of
+    ActMovePlayer (dx, dy) ->
+      world & (wdPlayer . plActor . acWorldPos) %~ (\(WorldPos (x, y)) -> WorldPos (x + dx, y + dy))
